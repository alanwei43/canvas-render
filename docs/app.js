!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);var i=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))};class n{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}render(){return i(this,void 0,void 0,(function*(){return yield this.doRender()}))}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t,!0)}}var o,r,a=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))};class l extends n{doRender(){return a(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,s)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{s(t)})})}))}}!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(o||(o={})),function(t){t[t.Center=0]="Center",t[t.Right=1]="Right",t[t.Left=2]="Left"}(r||(r={}));class h{}class d extends h{}class u{}class c extends u{}class y{constructor(t,e){this.pos=t,this.size=e}getSize(){return this.size||{height:0,width:0}}getLeftTopPos(){return this.pos}getLeftBottomPos(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}getRightTopPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}getRightBottomPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}getCenterPos(){return{x:this.pos.x+this.size.width/2,y:this.pos.y+this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}static init(t,e){const s={width:e.x-t.x,height:e.y-t.y};return new y(t,s)}toJSON(){return JSON.stringify({pos:this.pos,size:this.size,leftTopPos:this.getLeftTopPos(),leftBottomPos:this.getLeftBottomPos(),rightBottomPos:this.getRightBottomPos(),rightTopPos:this.getRightTopPos()},null,"\t")}}class f extends h{constructor(){super(...arguments),this.closePath=!1}}var p=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))};class x extends n{doRender(){return p(this,void 0,void 0,(function*(){return new Promise((t,e)=>{this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),this.data.drawType===o.Fill&&this.context.fillRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),this.data.drawType===o.Stroke&&this.context.strokeRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),t({success:!0,result:new y(this.data.pos,this.data.size)})})}))}}var g=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))};class w extends n{doRender(){return g(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fillStyle);const t=this.context.measureText(this.data.font.text).width;let e=this.data.pos.x;this.data.font.align===r.Right&&(e=this.context.canvas.width-this.data.pos.x-t),this.data.font.align===r.Center&&(e=this.data.pos.x-t/2);const s=this.data.pos.y+this.data.font.size;this.data.drawType===o.Fill&&this.context.fillText(this.data.font.text,e,s),this.data.drawType===o.Stroke&&this.context.strokeText(this.data.font.text,e,s);const i={success:!0,result:new y({x:e,y:this.data.pos.y},{height:this.data.font.size,width:t})};return Promise.resolve(i)}))}}class R extends n{doRender(){this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),this.data.drawType===o.Fill&&this.context.fill(),this.data.drawType===o.Stroke&&this.context.stroke();let t=0,e=0,s=0,i=0;this.data.positions.forEach(n=>{n.x<t&&(t=n.x),n.x>s&&(s=n.x),n.y<e&&(e=n.y),n.y>i&&(i=n.y)});const n=new c;return n.success=!0,n.result=y.init({x:t,y:e},{x:s,y:i}),n.result.data=this.data,Promise.resolve(n)}}var v=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))};const m=document.querySelector("#canvas1").getContext("2d"),S=new class{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return v(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}};S.push(t=>new l(m,{src:"./resources/280TSI.jpg",srcCoords:new y({x:0,y:0}),destCoords:new y({x:0,y:0},{width:300,height:225})}),"main-image").push(t=>new l(m,{src:"http://vw.faw-vw.com/content/dam/vw-ngw/faw-vw/homepage/site_logo/pc_logo.png",srcCoords:new y({x:0,y:0}),destCoords:new y({x:10,y:8})}),"logo").push(t=>{const e=S.getRenderResultById("main-image").result.getRightBottomPos();return new w(m,{pos:{x:5,y:e.y+12},font:{text:"大众 凌渡 280TSI DSG舒适版国VI",size:14,family:"sans-serif",align:r.Right},drawType:o.Fill})},"title").push(t=>{const e=t.chain.getRenderResultById("logo").result,s=new d;return s.pos=e.pos,s.size=e.size,s.strokeStyle="gray",new x(m,s)},"rect").push(t=>{const e=t.chain.getRenderResultById("title").result.getRightBottomPos();return new w(m,{pos:{x:5,y:e.y+10},font:{text:"18.00万",size:12,family:"sans-serif",align:r.Right},fillStyle:"gray",drawType:o.Fill})},"small-price").push(t=>{const e=t.chain.getRenderResultById("small-price").result,s=t.chain.getRenderResultById("title").result.getRightBottomPos();return new w(m,{pos:{x:e.size.width+10,y:s.y+5},font:{text:"12.48万",size:18,family:"sans-serif",align:r.Right},fillStyle:"red",drawType:o.Fill})},"large-price").push(t=>{const e=t.chain.getRenderResultById("small-price").result,s=new f;return s.positions=[{x:e.getLeftTopPos().x,y:e.getCenterPos().y+2},{x:e.getRightBottomPos().x,y:e.getCenterPos().y+2}],s.strokeStyle="gray",s.drawType=o.Stroke,s.lineWidth=.8,new R(m,s)}).push(t=>{const e=t.chain.getRenderResultById("small-price").result,s={drawType:o.Fill,pos:{x:5,y:e.getRightBottomPos().y+10},fillStyle:"#F5594E",font:{size:10,text:"总优惠可达5.63万  低于同城4S店报价1.83万",family:"Helvetica",align:r.Right}};return new w(m,s)},"sub-title").push(t=>{const e=t.chain.getRenderResultById("sub-title").result.getRightBottomPos().y+15,s=new f;return s.positions=[{x:5,y:e},{x:m.canvas.width-5,y:e}],s.drawType=o.Stroke,s.lineWidth=.5,s.strokeStyle="#ccc",new R(m,s)},"splitor").push(t=>{const e=t.chain.getRenderResultById("splitor").result.getRightBottomPos().y+15,s=m.canvas.width/4,i=new f;return i.positions=[{x:5,y:e+20},{x:5+s,y:e+20},{x:5+s+s,y:e+40},{x:5+s+s+s,y:e+0},{x:5+s+s+s+s-10,y:e+0},{x:5+s+s+s+s-10,y:e+72},{x:5,y:e+72},{x:5,y:e+20}],i.drawType=o.Fill,i.fillStyle="#fdeeed",new R(m,i)},"fold-line").push(t=>{const e=t.chain.getRenderResultById("fold-line").result.data;return new w(m,{pos:{x:e.positions[1].x,y:e.positions[1].y-15},font:{text:"14.78万",size:10,align:r.Center},fillStyle:"#f5594e",drawType:o.Fill})}).push(t=>{const e=t.chain.getRenderResultById("fold-line").result.data;return new w(m,{pos:{x:e.positions[2].x,y:e.positions[2].y},font:{text:"12.48万",size:10,align:r.Center},fillStyle:"#f5594e",drawType:o.Fill})}).push(t=>{const e=t.chain.getRenderResultById("fold-line").result.data;return new w(m,{pos:{x:e.positions[3].x,y:e.positions[3].y-12},font:{text:"16.27万",size:10,align:r.Center},fillStyle:"#f5594e",drawType:o.Fill})}),S.execute().then(()=>{S.getRenderResultById("sub-title").result})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,