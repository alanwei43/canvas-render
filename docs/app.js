!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);var i=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{h(i.next(t))}catch(t){o(t)}}function a(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((i=i.apply(t,e||[])).next())}))};class n{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}render(){return i(this,void 0,void 0,(function*(){return yield this.doRender()}))}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t,!0)}}var o,r=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{h(i.next(t))}catch(t){o(t)}}function a(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((i=i.apply(t,e||[])).next())}))};class a extends n{doRender(){return r(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,s)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{s(t)})})}))}}!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill",t[t.None=2]="None"}(o||(o={}));class h{}class d extends h{}class l{}class c extends l{}class u{constructor(t,e){this.pos=t,this.size=e}getSize(){return this.size||{height:0,width:0}}getLeftTopPos(){return this.pos}getLeftBottomPos(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}getRightTopPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}getRightBottomPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}getCenterPos(){return{x:this.pos.x+this.size.width/2,y:this.pos.y+this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}toJSON(){return JSON.stringify({pos:this.pos,size:this.size,leftTopPos:this.getLeftTopPos(),leftBottomPos:this.getLeftBottomPos(),rightBottomPos:this.getRightBottomPos(),rightTopPos:this.getRightTopPos()},null,"\t")}}class p extends h{constructor(){super(...arguments),this.closePath=!1}}var f=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{h(i.next(t))}catch(t){o(t)}}function a(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((i=i.apply(t,e||[])).next())}))};class y extends n{doRender(){return f(this,void 0,void 0,(function*(){return new Promise((t,e)=>{this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),this.data.drawType===o.Fill&&this.context.fillRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),this.data.drawType===o.Stroke&&this.context.strokeRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),t({success:!0,result:new u(this.data.pos,this.data.size)})})}))}}var g=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{h(i.next(t))}catch(t){o(t)}}function a(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((i=i.apply(t,e||[])).next())}))};class x extends n{constructor(){super(...arguments),this.textRightAlign=!1}doRender(){return g(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fillStyle);const t=this.context.measureText(this.data.font.text).width;this.textRightAlign&&(this.data.pos.x-=t);const e=this.data.pos.y+this.data.font.size;this.data.drawType===o.Fill&&this.context.fillText(this.data.font.text,this.data.pos.x,e),this.data.drawType===o.Stroke&&this.context.strokeText(this.data.font.text,this.data.pos.x,e);const s={success:!0,result:new u({x:this.data.pos.x,y:this.data.pos.y},{height:this.data.font.size,width:t})};return Promise.resolve(s)}))}}class w extends n{doRender(){return this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),this.data.drawType===o.Fill&&this.context.fill(),this.data.drawType===o.Stroke&&this.context.stroke(),Promise.resolve(new c)}}var v=function(t,e,s,i){return new(s||(s=Promise))((function(n,o){function r(t){try{h(i.next(t))}catch(t){o(t)}}function a(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((i=i.apply(t,e||[])).next())}))};const R=document.querySelector("#canvas1").getContext("2d"),m=new class{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return v(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}};m.push(t=>new a(R,{src:"./resources/280TSI.jpg",srcCoords:new u({x:0,y:0}),destCoords:new u({x:0,y:0},{width:300,height:225})}),"main-image").push(t=>new a(R,{src:"http://vw.faw-vw.com/content/dam/vw-ngw/faw-vw/homepage/site_logo/pc_logo.png",srcCoords:new u({x:0,y:0}),destCoords:new u({x:10,y:8})}),"logo").push(t=>{const e=m.getRenderResultById("main-image").result.getRightBottomPos(),s=new x(R,{pos:{x:e.x-5,y:e.y+12},font:{text:"大众 凌渡 280TSI DSG舒适版国VI",size:14,family:"sans-serif"},drawType:o.Fill});return s.textRightAlign=!0,s},"title").push(t=>{const e=t.chain.getRenderResultById("logo").result,s=new d;return s.pos=e.pos,s.size=e.size,s.strokeStyle="gray",new y(R,s)},"rect").push(t=>{const e=t.chain.getRenderResultById("title").result.getRightBottomPos(),s=new x(R,{pos:{x:e.x,y:e.y+10},font:{text:"18.00万",size:12,family:"sans-serif"},fillStyle:"gray",drawType:o.Fill});return s.textRightAlign=!0,s},"small-price").push(t=>{const e=t.chain.getRenderResultById("small-price").result.getLeftBottomPos(),s=t.chain.getRenderResultById("title").result.getRightBottomPos(),i=new x(R,{pos:{x:e.x-5,y:s.y+5},font:{text:"12.48万",size:18,family:"sans-serif"},fillStyle:"red",drawType:o.Fill});return i.textRightAlign=!0,i},"large-price").push(t=>{const e=t.chain.getRenderResultById("small-price").result,s=new p;return s.positions=[{x:e.getLeftTopPos().x,y:e.getCenterPos().y+2},{x:e.getRightBottomPos().x,y:e.getCenterPos().y+2}],s.strokeStyle="gray",s.drawType=o.Stroke,s.lineWidth=.8,new w(R,s)}).push(t=>{const e=t.chain.getRenderResultById("large-price").result.getRightBottomPos().y+15,s=new p;return s.positions=[{x:5,y:e},{x:R.canvas.width-5,y:e}],s.drawType=o.Stroke,s.lineWidth=1,s.strokeStyle="#ddd",new w(R,s)},"splitor"),m.execute().then(()=>{m.getRenderResultById("large-price").result})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,