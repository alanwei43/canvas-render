!function(t){var e={};function s(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class n{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t.color,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t.color,!0)}}var i=function(t,e,s,n){return new(s||(s=Promise))((function(i,o){function r(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((n=n.apply(t,e||[])).next())}))};class o extends n{render(){return i(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,s)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{s(t)})})}))}}class r{}class a{}class h extends a{}class c{constructor(t,e){this.pos=t,this.size=e}getSize(){return this.size||{height:0,width:0}}getLeftTopPos(){return this.pos}getLeftBottomPos(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}getRightTopPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}getRightBottomPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}getCenterPos(){return{x:this.pos.x+this.size.width/2,y:this.pos.y-this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}}class d{constructor(){this.closePath=!0}}var u=function(t,e,s,n){return new(s||(s=Promise))((function(i,o){function r(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((n=n.apply(t,e||[])).next())}))};class l extends n{render(){return u(this,void 0,void 0,(function*(){return new Promise((t,e)=>{let s=this.context.fillRect;this.updateFillStyle(this.data.fill)&&(s=this.context.fillRect),this.updateStrokeStyle(this.data.stroke)&&(s=this.context.strokeRect),s.apply(this.context,[this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height]),t({success:!0,result:new c(this.data.pos,this.data.size)})})}))}}var f=function(t,e,s,n){return new(s||(s=Promise))((function(i,o){function r(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((n=n.apply(t,e||[])).next())}))};class p extends n{constructor(){super(...arguments),this.textRightAlign=!1}render(){return f(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fill);const t=this.context.measureText(this.data.font.text).width;this.textRightAlign&&(this.data.pos.x-=t),this.context.fillText(this.data.font.text,this.data.pos.x,this.data.pos.y);const e={success:!0,result:new c(this.data.pos,{height:this.data.font.size,width:t})};return Promise.resolve(e)}))}}class x extends n{render(){let t=this.context.stroke;return this.updateFillStyle(this.data.fill)&&(t=this.context.fill),this.updateStrokeStyle(this.data.stroke)&&(t=this.context.stroke),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),t.apply(this.context),Promise.resolve(new h)}}var y=function(t,e,s,n){return new(s||(s=Promise))((function(i,o){function r(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(r,a)}h((n=n.apply(t,e||[])).next())}))};const g=document.querySelector("#canvas1").getContext("2d"),w=new class{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return y(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getLastRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}};w.push(t=>new o(g,{src:"./resources/280TSI.jpg",srcCoords:new c({x:0,y:0}),destCoords:new c({x:0,y:0},{width:300,height:225})}),"main-image").push(t=>new o(g,{src:"http://vw.faw-vw.com/content/dam/vw-ngw/faw-vw/homepage/site_logo/pc_logo.png",srcCoords:new c({x:0,y:0}),destCoords:new c({x:10,y:8})}),"logo").push(t=>{const e=w.getLastRenderResultById("main-image").result.getRightBottomPos(),s=new p(g,{pos:{x:e.x-5,y:e.y+12},font:{text:"大众 凌渡 280TSI DSG舒适版国VI",size:14,family:"sans-serif"}});return s.textRightAlign=!0,s},"title").push(t=>{const e=t.chain.getLastRenderResultById("logo").result,s=new r;return s.pos=e.pos,s.size=e.size,s.stroke={color:"gray"},console.log(),new l(g,s)}).push(t=>{const e=t.chain.getLastRenderResultById("title").result.getRightBottomPos(),s=new p(g,{pos:{x:e.x-50,y:e.y+15},font:{text:"12.48万",size:18,family:"sans-serif"},fill:{color:"red"}});return s.textRightAlign=!0,s}).push(t=>{const e=w.lastRenderResult,s=e.result.getRightBottomPos();return new p(g,{pos:{x:250,y:s.y-e.result.size.height},font:{text:"18.00万",size:12,family:"sans-serif"},fill:{color:"gray"}})}).push(t=>{const e=t.chain.lastRenderResult,s=new d;return s.positions=[{x:250,y:e.result.getCenterPos().y+2},{x:295,y:e.result.getCenterPos().y+2}],s.stroke={color:"#999"},s.lineWidth=.5,new x(g,s)}),w.execute()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,