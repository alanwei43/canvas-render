!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";var i,s;!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(i||(i={})),function(t){t[t.Center=0]="Center",t[t.Right=1]="Right",t[t.Left=2]="Left"}(s||(s={}));class r{}class o{}class a extends r{}class u extends r{}class c{}class h extends c{}var d=n(1);class l{constructor(t,e){this.logger=d.c.init("CoordinateData"),this.pos=t,this.size=e,this.logger.debug("pos: ",this.pos,", size: ",this.size)}getSize(){return this.size||{height:0,width:0}}leftTop(){return this.pos}leftBottom(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}rightTop(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}rightBottom(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}center(){return{x:this.pos.x+this.size.width/2,y:this.pos.y+this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}static init(t,e){const n={width:e.x-t.x,height:e.y-t.y};return new l(t,n)}toJSON(){return JSON.stringify({pos:this.pos,size:this.size,leftTopPos:this.leftTop(),leftBottomPos:this.leftBottom(),rightBottomPos:this.rightBottom(),rightTopPos:this.rightTop()},null,"\t")}}class f extends r{constructor(){super(...arguments),this.closePath=!1}}n.d(e,"f",(function(){return i})),n.d(e,"h",(function(){return s})),n.d(e,"b",(function(){return o})),n.d(e,"d",(function(){return a})),n.d(e,"e",(function(){return u})),n.d(e,"g",(function(){return h})),n.d(e,"a",(function(){return l})),n.d(e,"c",(function(){return f}))},function(t,e,n){"use strict";var i=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class s{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}render(){return i(this,void 0,void 0,(function*(){return yield this.doRender()}))}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t,!0)}}var r=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class o extends s{doRender(){return r(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,n)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{n(t)})})}))}}var a=n(0),u=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class c extends s{doRender(){return u(this,void 0,void 0,(function*(){return new Promise((t,e)=>{this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),this.data.drawType===a.f.Fill&&this.context.fillRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),this.data.drawType===a.f.Stroke&&this.context.strokeRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),t({success:!0,result:new a.a(this.data.pos,this.data.size)})})}))}}let h=0;class d{constructor(t){this.logger=t}getLogTxt(t){return t.unshift(`${h++} [${this.logger}]`),t}debug(...t){console.log.apply(window,this.getLogTxt(t))}warn(...t){console.warn.apply(window,this.getLogTxt(t))}error(...t){console.error.apply(window,this.getLogTxt(t))}static init(t){return new d(t)}}const l=d.init("default");var f=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class p extends s{doRender(){return f(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fillStyle);const t=this.context.measureText(this.data.font.text),e=t.width,n=this.data.font.size||t.actualBoundingBoxAscent-t.actualBoundingBoxDescent;let i=this.data.pos.x;this.data.font.align===a.h.Right&&(i=this.context.canvas.width-this.data.pos.x-e),this.data.font.align===a.h.Center&&(i=this.data.pos.x-e/2);const s=this.data.pos.y+this.data.font.size;this.data.drawType===a.f.Fill&&this.context.fillText(this.data.font.text,i,s),this.data.drawType===a.f.Stroke&&this.context.strokeText(this.data.font.text,i,s);const r={success:!0,result:new a.a({x:i,y:this.data.pos.y},{height:n,width:e})};return l.debug(`[${this.data.font.text}] 的 result 为: `,r,", data 为: ",this.data),Promise.resolve(r)}))}}class g extends s{doRender(){this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),this.data.drawType===a.f.Fill&&this.context.fill(),this.data.drawType===a.f.Stroke&&this.context.stroke();let t=0,e=0,n=0,i=0;this.data.positions.forEach(s=>{s.x<t&&(t=s.x),s.x>n&&(n=s.x),s.y<e&&(e=s.y),s.y>i&&(i=s.y)});const s=new a.g;return s.success=!0,s.result=a.a.init({x:t,y:e},{x:n,y:i}),s.result.data=this.data,Promise.resolve(s)}}var x,y=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class w{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return y(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}}!function(t){t[t.string=0]="string",t[t.number=1]="number",t[t.boolean=2]="boolean",t[t.function=3]="function",t[t.expression=4]="expression",t[t.with=5]="with"}(x||(x={}));class v{constructor(t){this.context=t,l.debug("function context: ",this.context)}getFieldNameAndType(t){l.debug(`根据属性名(${t})获取字段名称和字段值的类型`);const e=/^(@|data:|expr:|func:|\$|with:)([^:]+)(:[a-z]+)?/.exec(t);if(!e||!e.length)return l.debug("属性名不是有效的数据绑定"),null;const n=e[1],i=e[3],s={fieldName:e[2],valueType:x.string};if(l.debug(`属性名绑定关联的字段名为: ${s.fieldName}`),"data:"===n||"@"===n){let t=x.string;switch(i){case":string":t=x.string;break;case":number":t=x.number;break;case":boolean":t=x.boolean}return s.valueType=t,s}return"expr:"===n?(s.valueType=x.expression,s):"func"===n?(s.valueType=x.function,s):"$"===n||"with:"===n?(s.valueType=x.with,s):null}convertFieldNameHyphen(t){const e=t.split("-"),n=e.splice(1,e.length-1).reduce((t,e)=>t+=e[0].toUpperCase()+e.substr(1),e[0]);return n!==t&&l.debug(`key为: ${t}, 转换后的key为${n}`),n}calculateFieldValue(t,e){if(e===x.boolean)return"false"!==t&&"0"!==t;if(e===x.number)return parseFloat(t);if(e===x.string)return t;if(e===x.function){return new Function(t).apply(this.context)}return e===x.expression?this.calculateFieldValue(`return (${t});`,x.function):e===x.with?this.calculateFieldValue(`with(this) { return  ${t}; }`,x.function):null}updateObjValue(t,e,n){l.debug(`准备更新对象 ${e} 字段的值为: `,n);const i=e.split(".").map(t=>this.convertFieldNameHyphen(t));l.debug(`对象的key为: ${i.join(".")}`),i.splice(0,i.length-1).reduce((t,e)=>(null!==t[e]&&void 0!==t[e]||(t[e]={}),t[e]),t)[i[0]]=n,l.debug(`完成对象key为${i.join(".")}的值更新: `,t)}generateAttributes(t,e){return l.debug("迭代元素(",t,")所有属性, 返回数据"),t.getAttributeNames().forEach(n=>{l.debug("元素属性名: ",n);const i=this.getFieldNameAndType(n);if(null==i)return void l.warn(`元素属性名${n}不是有效的数据绑定格式`);const s=t.getAttribute(n),r=this.calculateFieldValue(s,i.valueType);this.updateObjValue(e,i.fieldName,r),l.debug(`元素属性名为: ${n}, 属性值为: ${s}, 对应的字段名为: ${i.fieldName}, 字段值的类型为: ${i.valueType}, 字段值为: `,r)}),l.debug("元素(",t,")属性迭代完成, 返回结果: ",e),e}}class b{constructor(t,e){this.chain=t,this.context=e}getCoors(t){const e=this.chain.getRenderResultById(t).result;return l.debug(`获取${t}对应的 CoordinateData 数据, pos: `,e),new a.a(e.pos,e.size)}get canvas(){return{height:this.context.canvas.height,width:this.context.canvas.width}}pos(t){return this.getCoors(t).pos}size(t){return this.getCoors(t).size}posLeftTop(t){return this.getCoors(t).leftTop()}posLeftBottom(t){return this.getCoors(t).leftBottom()}posRightTop(t){return this.getCoors(t).rightTop()}posRightBottom(t){return this.getCoors(t).rightBottom()}posCenter(t){return this.getCoors(t).center()}}var m=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class C{constructor(t){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t)}render(t){return m(this,void 0,void 0,(function*(){let e=[];if("string"==typeof t){const n=document.querySelector(t);e=Array.from(n.content.children).filter(t=>t instanceof HTMLElement)}Array.isArray(t)&&(e=e),l.debug(`总共接收到${e.length}个元素`),this.chain=new w;const n=new v(new b(this.chain,this.context));return e.forEach((t,e)=>{const i=t.getAttribute("id"),s=t.getAttribute("type")||t.nodeName.toLowerCase();l.debug(`第${e+1}个元素, id: ${i}, render type: ${s}`),"img"===s&&this.chain.push(e=>{l.debug(`[${i}] 返回 ImageRender`);const s=new a.b;return n.generateAttributes(t,s),new o(this.context,s)},i),"text"===s&&this.chain.push(e=>{l.debug(`[${i}] 返回 TextRender`);const s=new a.e;return s.font={text:t.textContent},n.generateAttributes(t,s),new p(this.context,s)},i),"path"===s&&this.chain.push(e=>{l.debug(`[${i}] 返回 LineRender`);const s=new a.c;return n.generateAttributes(t,s),new g(this.context,s)},i)}),this.chain.execute()}))}}n.d(e,"a",(function(){return o})),n.d(e,"e",(function(){return c})),n.d(e,"h",(function(){return p})),n.d(e,"b",(function(){return g})),n.d(e,"f",(function(){return w})),n.d(e,"g",(function(){return C})),n.d(e,"c",(function(){return d})),n.d(e,"d",(function(){return l}))},,function(t,e,n){"use strict";n.r(e);var i=n(1);const s=document.querySelector("#canvas1").getContext("2d");new i.g(s).render("#canvas-temp")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,