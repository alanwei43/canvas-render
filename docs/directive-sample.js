!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";var i,s;!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(i||(i={})),function(t){t[t.Center=0]="Center",t[t.Right=1]="Right",t[t.Left=2]="Left"}(s||(s={}));class r{}class o{}class a extends r{}class u{}class c extends u{}class d{constructor(t,e){this.pos=t,this.size=e}getSize(){return this.size||{height:0,width:0}}getLeftTopPos(){return this.pos}getLeftBottomPos(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}getRightTopPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}getRightBottomPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}getCenterPos(){return{x:this.pos.x+this.size.width/2,y:this.pos.y+this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}static init(t,e){const n={width:e.x-t.x,height:e.y-t.y};return new d(t,n)}toJSON(){return JSON.stringify({pos:this.pos,size:this.size,leftTopPos:this.getLeftTopPos(),leftBottomPos:this.getLeftBottomPos(),rightBottomPos:this.getRightBottomPos(),rightTopPos:this.getRightTopPos()},null,"\t")}}class h extends r{constructor(){super(...arguments),this.closePath=!1}}n.d(e,"e",(function(){return i})),n.d(e,"g",(function(){return s})),n.d(e,"b",(function(){return o})),n.d(e,"d",(function(){return a})),n.d(e,"f",(function(){return c})),n.d(e,"a",(function(){return d})),n.d(e,"c",(function(){return h}))},function(t,e,n){"use strict";var i=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class s{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}render(){return i(this,void 0,void 0,(function*(){return yield this.doRender()}))}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t,!0)}}var r=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class o extends s{doRender(){return r(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,n)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{n(t)})})}))}}var a=n(0),u=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class c extends s{doRender(){return u(this,void 0,void 0,(function*(){return new Promise((t,e)=>{this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),this.data.drawType===a.e.Fill&&this.context.fillRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),this.data.drawType===a.e.Stroke&&this.context.strokeRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),t({success:!0,result:new a.a(this.data.pos,this.data.size)})})}))}}var d=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class h extends s{doRender(){return d(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fillStyle);const t=this.context.measureText(this.data.font.text).width;let e=this.data.pos.x;this.data.font.align===a.g.Right&&(e=this.context.canvas.width-this.data.pos.x-t),this.data.font.align===a.g.Center&&(e=this.data.pos.x-t/2);const n=this.data.pos.y+this.data.font.size;this.data.drawType===a.e.Fill&&this.context.fillText(this.data.font.text,e,n),this.data.drawType===a.e.Stroke&&this.context.strokeText(this.data.font.text,e,n);const i={success:!0,result:new a.a({x:e,y:this.data.pos.y},{height:this.data.font.size,width:t})};return Promise.resolve(i)}))}}class l extends s{doRender(){this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),this.data.drawType===a.e.Fill&&this.context.fill(),this.data.drawType===a.e.Stroke&&this.context.stroke();let t=0,e=0,n=0,i=0;this.data.positions.forEach(s=>{s.x<t&&(t=s.x),s.x>n&&(n=s.x),s.y<e&&(e=s.y),s.y>i&&(i=s.y)});const s=new a.f;return s.success=!0,s.result=a.a.init({x:t,y:e},{x:n,y:i}),s.result.data=this.data,Promise.resolve(s)}}var f,p=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class y{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return p(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}}class g{}!function(t){t[t.string=0]="string",t[t.number=1]="number",t[t.boolean=2]="boolean",t[t.function=3]="function",t[t.expression=4]="expression",t[t.with=5]="with"}(f||(f={}));class x{constructor(){this.context=new g}getFieldNameAndType(t){const e=/^(@|data|expr|func|with):([^:]+)(:[a-z]+)?/.exec(t);if(!e||!e.length)return null;const n=e[1],i=e[3],s={fieldName:e[2],valueType:f.string};if("data"===n||"@"===n){let t=f.string;switch(i){case"string":t=f.string;break;case"number":t=f.number;break;case"boolean":t=f.boolean}return s.valueType=t,s}return"expr"===n?(s.valueType=f.expression,s):"function"===n?(s.valueType=f.function,s):null}fieldNameSlashConvert(t){const e=t.split("-");return e.splice(1,e.length-1).reduce((t,e)=>t+=e[0].toUpperCase()+e.substr(1),e[0])}calculateFieldValue(t,e){if(b.debug(`calculate field value: ${t} to type ${e}`),e===f.boolean)return"false"!==t&&"0"!==t;if(e===f.number)return parseFloat(t);if(e===f.string)return t;if(e===f.function){return new Function(t).apply(this.context)}return e===f.expression?this.calculateFieldValue(`return (${t});`,f.function):(b.warn(`invalid field type: ${e}, for value: ${t}`),null)}updateObjValue(t,e,n){b.debug(`ready update obj[${e}] = ${n}`);const i=e.split(".").map(t=>this.fieldNameSlashConvert(t));b.debug(`property parts: ${i.join(" -> ")} `),i.splice(0,i.length-1).reduce((t,e)=>(b.debug(`update obj key of ${e}`),null!==t[e]&&void 0!==t[e]||(t[e]={}),t[e]),t)[i[0]]=n,b.debug(`complete update obj[${e}] = ${n}`)}generateAttributes(t,e){return t.getAttributeNames().forEach(n=>{const i=this.getFieldNameAndType(n);if(null==i)return void b.warn("invalid attr name: "+n);b.debug(`valid attr name is ${i.fieldName}, type is ${i.valueType}`);const s=t.getAttribute(n),r=this.calculateFieldValue(s,i.valueType);b.debug(`the value of ${i.fieldName} is ${r}`),this.updateObjValue(e,i.fieldName,r)}),e}}var v=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class w{constructor(t){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t)}render(t){return v(this,void 0,void 0,(function*(){let e=[];if("string"==typeof t){const n=document.querySelector(t);e=Array.from(n.content.children).filter(t=>t instanceof HTMLElement)}Array.isArray(t)&&(e=e);const n=new x;return this.chain=new y,e.forEach(t=>{const e=t.getAttribute("id");if("IMG"===t.nodeName){console.log("start");const i=new a.b;console.log("data: ",i),n.generateAttributes(t,i),console.log("end"),this.chain.push(t=>new o(this.context,i),e)}}),this.chain.execute()}))}}class m{constructor(t){this.logger=t}debug(t){console.log(`[${this.logger}] `,t)}warn(t){console.warn(`[${this.logger}] `,t)}error(t){console.error(`[${this.logger}] `,t)}static init(t){return new m(t)}}const b=m.init("default");n.d(e,"a",(function(){return o})),n.d(e,"d",(function(){return c})),n.d(e,"g",(function(){return h})),n.d(e,"b",(function(){return l})),n.d(e,"e",(function(){return y})),n.d(e,"f",(function(){return w})),n.d(e,"c",(function(){return b}))},,function(t,e,n){"use strict";n.r(e);var i=n(1);const s=document.querySelector("#canvas1").getContext("2d");new i.f(s).render("#canvas-temp")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,