!function(t){var e={};function n(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(s,i,function(e){return t[e]}.bind(null,i));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";var s,i;!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(s||(s={})),function(t){t[t.Center=0]="Center",t[t.Right=1]="Right",t[t.Left=2]="Left"}(i||(i={}));class o{}class r extends o{}class a extends o{}class c{}class u extends c{}class h{constructor(t,e){this.pos=t,this.size=e}getSize(){return this.size||{height:0,width:0}}getLeftTopPos(){return this.pos}getLeftBottomPos(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}getRightTopPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}getRightBottomPos(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}getCenterPos(){return{x:this.pos.x+this.size.width/2,y:this.pos.y+this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}static init(t,e){const n={width:e.x-t.x,height:e.y-t.y};return new h(t,n)}toJSON(){return JSON.stringify({pos:this.pos,size:this.size,leftTopPos:this.getLeftTopPos(),leftBottomPos:this.getLeftBottomPos(),rightBottomPos:this.getRightBottomPos(),rightTopPos:this.getRightTopPos()},null,"\t")}}class d extends o{constructor(){super(...arguments),this.closePath=!1}}n.d(e,"e",(function(){return s})),n.d(e,"g",(function(){return i})),n.d(e,"c",(function(){return r})),n.d(e,"d",(function(){return a})),n.d(e,"f",(function(){return u})),n.d(e,"a",(function(){return h})),n.d(e,"b",(function(){return d}))},function(t,e,n){"use strict";var s=function(t,e,n,s){return new(n||(n=Promise))((function(i,o){function r(t){try{c(s.next(t))}catch(t){o(t)}}function a(t){try{c(s.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}))};class i{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}render(){return s(this,void 0,void 0,(function*(){return yield this.doRender()}))}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t,!0)}}var o=function(t,e,n,s){return new(n||(n=Promise))((function(i,o){function r(t){try{c(s.next(t))}catch(t){o(t)}}function a(t){try{c(s.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}))};class r extends i{doRender(){return o(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,n)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{n(t)})})}))}}var a=n(0),c=function(t,e,n,s){return new(n||(n=Promise))((function(i,o){function r(t){try{c(s.next(t))}catch(t){o(t)}}function a(t){try{c(s.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}))};class u extends i{doRender(){return c(this,void 0,void 0,(function*(){return new Promise((t,e)=>{this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),this.data.drawType===a.e.Fill&&this.context.fillRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),this.data.drawType===a.e.Stroke&&this.context.strokeRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),t({success:!0,result:new a.a(this.data.pos,this.data.size)})})}))}}var h=function(t,e,n,s){return new(n||(n=Promise))((function(i,o){function r(t){try{c(s.next(t))}catch(t){o(t)}}function a(t){try{c(s.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}))};class d extends i{doRender(){return h(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fillStyle);const t=this.context.measureText(this.data.font.text).width;let e=this.data.pos.x;this.data.font.align===a.g.Right&&(e=this.context.canvas.width-this.data.pos.x-t),this.data.font.align===a.g.Center&&(e=this.data.pos.x-t/2);const n=this.data.pos.y+this.data.font.size;this.data.drawType===a.e.Fill&&this.context.fillText(this.data.font.text,e,n),this.data.drawType===a.e.Stroke&&this.context.strokeText(this.data.font.text,e,n);const s={success:!0,result:new a.a({x:e,y:this.data.pos.y},{height:this.data.font.size,width:t})};return Promise.resolve(s)}))}}class l extends i{doRender(){this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),this.data.drawType===a.e.Fill&&this.context.fill(),this.data.drawType===a.e.Stroke&&this.context.stroke();let t=0,e=0,n=0,s=0;this.data.positions.forEach(i=>{i.x<t&&(t=i.x),i.x>n&&(n=i.x),i.y<e&&(e=i.y),i.y>s&&(s=i.y)});const i=new a.f;return i.success=!0,i.result=a.a.init({x:t,y:e},{x:n,y:s}),i.result.data=this.data,Promise.resolve(i)}}var f=function(t,e,n,s){return new(n||(n=Promise))((function(i,o){function r(t){try{c(s.next(t))}catch(t){o(t)}}function a(t){try{c(s.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}))};class p{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return f(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}}var x=function(t,e,n,s){return new(n||(n=Promise))((function(i,o){function r(t){try{c(s.next(t))}catch(t){o(t)}}function a(t){try{c(s.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}))};class y{constructor(t){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t)}calculate(t,e){const n=new Function(t).apply(this);return null==n||""===n?e:n}getResultById(t){return(this.chain.getRenderResultById(t)||{}).result}generateAttributes(t,e){const n=/([A-Za-z.\d\-]+)/,s=()=>new RegExp(`@${n.source}:(\\w+)`),i=()=>new RegExp(`\\[${n.source}\\]`),o=()=>new RegExp(`\\(${n.source}\\)`);return t.getAttributeNames().forEach(e=>{const n=t.getAttribute(e);let r="",a="";if(s().test(e)){const t=s().exec(e);a=t[1];const i=t[2];r=n,"number"===i&&(r=parseInt(n)),"boolean"===i&&(r="false"!==n&&"0"!==r)}else i().test(e)?(a=i().exec(e)[1],r=new Function(`return (${n})`).apply(this)):o().test(e)?(a=o().exec(e)[1],r=new Function(n).apply(this)):console.warn("invalid attribute name: "+e)}),e}convert2Image(t){const e=this.calculate(t.getAttribute("src-coords-pos")),n=this.calculate(t.getAttribute("dest-coords-pos")),s=this.calculate(t.getAttribute("dest-coords-size"));return new r(this.context,{src:t.getAttribute("src"),srcCoords:new a.a(e),destCoords:new a.a(n,s)})}convert2Text(t){const e=new a.d;return e.font={text:t.textContent,size:parseInt(t.getAttribute("font-size")),family:t.getAttribute("font-family"),align:a.g.Right},e.pos=this.calculate(t.getAttribute("pos")),e.drawType=a.e.Fill,e.fillStyle=t.getAttribute("color"),console.log("data: ",e),new d(this.context,e)}render(t){return x(this,void 0,void 0,(function*(){let e=[];if("string"==typeof t){const n=document.querySelector(t);e=Array.from(n.content.children).filter(t=>t instanceof HTMLElement)}return Array.isArray(t)&&(e=e),this.chain=new p,e.forEach(t=>{const e=t.getAttribute("id");"IMG"===t.nodeName&&this.chain.push(e=>this.convert2Image(t),e),"TEXT"===t.nodeName&&this.chain.push(e=>this.convert2Text(t),e)}),this.chain.execute()}))}}n.d(e,"a",(function(){return r})),n.d(e,"c",(function(){return u})),n.d(e,"f",(function(){return d})),n.d(e,"b",(function(){return l})),n.d(e,"d",(function(){return p})),n.d(e,"e",(function(){return y}))},,function(t,e,n){"use strict";n.r(e);var s=n(1);const i=document.querySelector("#canvas1").getContext("2d");new s.e(i).render("#canvas-temp")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,