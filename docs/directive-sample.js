!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";var i,s;!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(i||(i={})),function(t){t[t.Center=0]="Center",t[t.Right=1]="Right",t[t.Left=2]="Left"}(s||(s={}));class r{}class o{}class a extends r{}class u extends r{}class c{}class h extends c{}class d{constructor(t,e){this.pos=t,this.size=e}getSize(){return this.size||{height:0,width:0}}leftTop(){return this.pos}leftBottom(){return{x:this.pos.x,y:this.pos.y+this.getSize().height}}rightTop(){return{x:this.pos.x+this.getSize().width,y:this.pos.y}}rightBottom(){return{x:this.pos.x+this.getSize().width,y:this.pos.y+this.getSize().height}}center(){return{x:this.pos.x+this.size.width/2,y:this.pos.y+this.size.height/2}}increaseX(t){return this.pos.x+=t,this}increaseY(t){return this.pos.y+=t,this}static init(t,e){const n={width:e.x-t.x,height:e.y-t.y};return new d(t,n)}toJSON(){return JSON.stringify({pos:this.pos,size:this.size,leftTopPos:this.leftTop(),leftBottomPos:this.leftBottom(),rightBottomPos:this.rightBottom(),rightTopPos:this.rightTop()},null,"\t")}}class l extends r{constructor(){super(...arguments),this.closePath=!1}}n.d(e,"f",(function(){return i})),n.d(e,"h",(function(){return s})),n.d(e,"b",(function(){return o})),n.d(e,"d",(function(){return a})),n.d(e,"e",(function(){return u})),n.d(e,"g",(function(){return h})),n.d(e,"a",(function(){return d})),n.d(e,"c",(function(){return l}))},function(t,e,n){"use strict";var i=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class s{constructor(t,e){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t),this.data=e}render(){return i(this,void 0,void 0,(function*(){return yield this.doRender()}))}updateFont(t){let e="";t.size&&(e+=t.size+"px"),t.family&&(e+=" "+t.family),this.context.font=e}updateFillStyle(t){return!!t&&(this.context.fillStyle=t,!0)}updateStrokeStyle(t){return!!t&&(this.context.strokeStyle=t,!0)}}var r=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class o extends s{doRender(){return r(this,void 0,void 0,(function*(){const t=new Image;return t.src=this.data.src,new Promise((e,n)=>{t.addEventListener("load",()=>{this.data.srcCoords.size||(this.data.srcCoords.size={width:t.width,height:t.height}),this.data.destCoords.size||(this.data.destCoords.size=this.data.srcCoords.size),this.context.drawImage(t,this.data.srcCoords.pos.x,this.data.srcCoords.pos.y,this.data.srcCoords.size.width,this.data.srcCoords.size.height,this.data.destCoords.pos.x,this.data.destCoords.pos.y,this.data.destCoords.size.width,this.data.destCoords.size.height),e({success:!0,result:this.data.destCoords})}),t.addEventListener("error",t=>{n(t)})})}))}}var a=n(0),u=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class c extends s{doRender(){return u(this,void 0,void 0,(function*(){return new Promise((t,e)=>{this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),this.data.drawType===a.f.Fill&&this.context.fillRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),this.data.drawType===a.f.Stroke&&this.context.strokeRect(this.data.pos.x,this.data.pos.y,this.data.size.width,this.data.size.height),t({success:!0,result:new a.a(this.data.pos,this.data.size)})})}))}}var h=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class d extends s{doRender(){return h(this,void 0,void 0,(function*(){this.updateFont(this.data.font),this.updateFillStyle(this.data.fillStyle);const t=this.context.measureText(this.data.font.text).width;let e=this.data.pos.x;this.data.font.align===a.h.Right&&(e=this.context.canvas.width-this.data.pos.x-t),this.data.font.align===a.h.Center&&(e=this.data.pos.x-t/2);const n=this.data.pos.y+this.data.font.size;this.data.drawType===a.f.Fill&&this.context.fillText(this.data.font.text,e,n),this.data.drawType===a.f.Stroke&&this.context.strokeText(this.data.font.text,e,n);const i={success:!0,result:new a.a({x:e,y:this.data.pos.y},{height:this.data.font.size,width:t})};return Promise.resolve(i)}))}}class l extends s{doRender(){this.updateFillStyle(this.data.fillStyle),this.updateStrokeStyle(this.data.strokeStyle),"number"==typeof this.data.lineWidth&&(this.context.lineWidth=this.data.lineWidth),this.context.beginPath(),this.data.positions.forEach((t,e)=>{0===e?this.context.moveTo(t.x,t.y):this.context.lineTo(t.x,t.y)}),this.data.closePath&&this.context.closePath(),this.data.drawType===a.f.Fill&&this.context.fill(),this.data.drawType===a.f.Stroke&&this.context.stroke();let t=0,e=0,n=0,i=0;this.data.positions.forEach(s=>{s.x<t&&(t=s.x),s.x>n&&(n=s.x),s.y<e&&(e=s.y),s.y>i&&(i=s.y)});const s=new a.g;return s.success=!0,s.result=a.a.init({x:t,y:e},{x:n,y:i}),s.result.data=this.data,Promise.resolve(s)}}var f,p=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class y{constructor(){this.renders=[]}push(t,e){return e||(e=Date.now().toString()),this.renders.push({id:e,getRender:t}),this}execute(){return p(this,void 0,void 0,(function*(){return this.renders.reduce((t,e)=>t.then(()=>e.getRender({chain:this}).render().then(t=>(e.renderResult=t,"ok")).catch(()=>"fail")),Promise.resolve("first"))}))}get renderResults(){return this.renders.filter(t=>null!==t.renderResult&&void 0!==t.renderResult)}get lastRenderResult(){const t=this.renderResults,e=t[t.length-1];return e?e.renderResult:null}getRenderResultById(t){const e=this.renderResults.filter(e=>e.id===t)[0];return e?e.renderResult:null}}!function(t){t[t.string=0]="string",t[t.number=1]="number",t[t.boolean=2]="boolean",t[t.function=3]="function",t[t.expression=4]="expression",t[t.with=5]="with"}(f||(f={}));class g{constructor(t){this.context=t}getFieldNameAndType(t){const e=/^(@|data:|expr:|func:|\$|with:)([^:]+)(:[a-z]+)?/.exec(t);if(!e||!e.length)return null;const n=e[1],i=e[3],s={fieldName:e[2],valueType:f.string};if(v.debug(`${t} => field type: ${n}, return type: ${i}`),"data:"===n||"@"===n){let t=f.string;switch(i){case":string":t=f.string;break;case":number":t=f.number;break;case":boolean":t=f.boolean}return s.valueType=t,s}return"expr:"===n?(s.valueType=f.expression,s):"func"===n?(s.valueType=f.function,s):"$"===n||"with:"===n?(s.valueType=f.with,s):null}convertFieldNameHyphen(t){const e=t.split("-");return e.splice(1,e.length-1).reduce((t,e)=>t+=e[0].toUpperCase()+e.substr(1),e[0])}calculateFieldValue(t,e){if(e===f.boolean)return"false"!==t&&"0"!==t;if(e===f.number)return parseFloat(t);if(e===f.string)return t;if(e===f.function){return new Function(t).apply(this.context)}return e===f.expression?this.calculateFieldValue(`return (${t});`,f.function):e===f.with?this.calculateFieldValue(`with(this) { return  ${t}; }`,f.function):(v.warn(`invalid field type: ${e}, for value: ${t}`),null)}updateObjValue(t,e,n){v.debug("ready update data",t,`, the key of [${e}] to `,n);const i=e.split(".").map(t=>this.convertFieldNameHyphen(t));v.debug(`property parts path: ${i.join(" -> ")} `),i.splice(0,i.length-1).reduce((t,e)=>(v.debug(`update key ${e}`),null!==t[e]&&void 0!==t[e]||(t[e]={}),t[e]),t)[i[0]]=n,v.debug("complete update: ",t)}generateAttributes(t,e){return t.getAttributeNames().forEach(n=>{const i=this.getFieldNameAndType(n);if(null==i)return void v.warn("invalid attr name: "+n);v.debug(`valid attr name is ${i.fieldName}, type is ${i.valueType}`);const s=t.getAttribute(n);v.debug(`value ${s} of ${n} to type: ${i.valueType}`);const r=this.calculateFieldValue(s,i.valueType);v.debug(`the value of ${i.fieldName} is: `,r),this.updateObjValue(e,i.fieldName,r)}),v.debug("generateAttributes result: ",e),e}}class x{constructor(t){this.logger=t}debug(...t){t.unshift(`[${this.logger}] `),console.log.apply(window,t)}warn(...t){t.unshift(`[${this.logger}] `),console.warn.apply(window,t)}error(...t){t.unshift(`[${this.logger}] `),console.error.apply(window,t)}static init(t){return new x(t)}}const v=x.init("default");class w{constructor(t,e){this.chain=t,this.context=e}getCoors(t){const e=this.chain.getRenderResultById(t).result;return new a.a(e.pos,e.size)}get canvas(){return{height:this.context.canvas.height,width:this.context.canvas.width}}pos(t){return this.getCoors(t).pos}size(t){return this.getCoors(t).size}posLeftTop(t){return this.getCoors(t).leftTop()}posLeftBottom(t){return this.getCoors(t).leftBottom()}posRightTop(t){return this.getCoors(t).rightTop()}posRightBottom(t){return this.getCoors(t).rightBottom()}posCenter(t){return this.getCoors(t).center()}}var m=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function a(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}u((i=i.apply(t,e||[])).next())}))};class b{constructor(t){t instanceof HTMLCanvasElement&&(this.context=t.getContext("2d")),t instanceof CanvasRenderingContext2D&&(this.context=t)}render(t){return m(this,void 0,void 0,(function*(){let e=[];if("string"==typeof t){const n=document.querySelector(t);e=Array.from(n.content.children).filter(t=>t instanceof HTMLElement)}Array.isArray(t)&&(e=e),this.chain=new y;const n=new g(new w(this.chain,this.context));return e.forEach(t=>{const e=t.getAttribute("id");"IMG"===t.nodeName&&this.chain.push(i=>{v.debug("image element: ",e);const s=new a.b;return n.generateAttributes(t,s),new o(this.context,s)},e),"TEXT"===t.nodeName&&this.chain.push(i=>{v.debug("text element: ",e);const s=new a.e;return s.font={text:t.textContent},n.generateAttributes(t,s),new d(this.context,s)},e),"PATH"===t.nodeName&&this.chain.push(i=>{v.debug("path element: ",e);const s=new a.c;return n.generateAttributes(t,s),new l(this.context,s)},e)}),this.chain.execute()}))}}n.d(e,"a",(function(){return o})),n.d(e,"d",(function(){return c})),n.d(e,"g",(function(){return d})),n.d(e,"b",(function(){return l})),n.d(e,"e",(function(){return y})),n.d(e,"f",(function(){return b})),n.d(e,"c",(function(){return v}))},,function(t,e,n){"use strict";n.r(e);var i=n(1);const s=document.querySelector("#canvas1").getContext("2d");new i.f(s).render("#canvas-temp")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,